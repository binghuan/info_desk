// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import domain "infodesk/domain"
import mock "github.com/stretchr/testify/mock"

// ArticleUsecase is an autogenerated mock type for the ArticleUsecase type
type BankUsecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *BankUsecase) FetchBanks(ctx context.Context) ([]domain.BeneficiaryBank, error) {
	ret := _m.Called(ctx)

	var r0 []domain.BeneficiaryBank
	if rf, ok := ret.Get(0).(func(context.Context) []domain.BeneficiaryBank); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BeneficiaryBank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *BankUsecase) FetchBankBranches(ctx context.Context, bankCode string, province string, city string) (res []domain.BankNode, err error) {

	ret := _m.Called(ctx, bankCode, province, city)

	var r0 []domain.BankNode
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.BankNode); ok {
		r0 = rf(ctx, bankCode, province, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BankNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, bankCode, province, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
